/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  ExecutableScript,
  ExecuteScriptParams,
  ExecuteScriptResult,
  Script,
  SignerProvider,
  HexString,
} from "@alephium/web3";
import { default as ChangeAdminScriptJson } from "../scripts/ChangeAdmin.ral.json";
import { default as SetMultipleValuesScriptJson } from "../scripts/SetMultipleValues.ral.json";
import { default as SetRandomValueScriptJson } from "../scripts/SetRandomValue.ral.json";
import { default as SetSubContractDepositScriptJson } from "../scripts/SetSubContractDeposit.ral.json";
import { default as SetValueScriptJson } from "../scripts/SetValue.ral.json";
import { default as TestUpdateValueScriptJson } from "../scripts/TestUpdateValue.ral.json";
import { Random, AllStructs } from "./types";

export const ChangeAdmin = new ExecutableScript<{
  admin: Address;
  oracle: HexString;
}>(Script.fromJson(ChangeAdminScriptJson, "", AllStructs));

export const SetMultipleValues = new ExecutableScript<{
  keys: [
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString
  ];
  values: [
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint
  ];
  timestamps: [
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint,
    bigint
  ];
  batchSize: bigint;
  oracle: HexString;
}>(Script.fromJson(SetMultipleValuesScriptJson, "", AllStructs));

export const SetRandomValue = new ExecutableScript<{
  round: bigint;
  value: Random;
  oracle: HexString;
}>(Script.fromJson(SetRandomValueScriptJson, "", AllStructs));

export const SetSubContractDeposit = new ExecutableScript<{
  subContractDeposit: bigint;
  oracle: HexString;
}>(Script.fromJson(SetSubContractDepositScriptJson, "", AllStructs));

export const SetValue = new ExecutableScript<{
  key: HexString;
  value: bigint;
  timestamp: bigint;
  oracle: HexString;
}>(Script.fromJson(SetValueScriptJson, "", AllStructs));

export const TestUpdateValue = new ExecutableScript<{
  instance: HexString;
  oracleValue: HexString;
  value: bigint;
  timestamp: bigint;
}>(Script.fromJson(TestUpdateValueScriptJson, "", AllStructs));
