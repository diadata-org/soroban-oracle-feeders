/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as DIAOracleBaseTestContractJson } from "../test/DIAOracleBaseTest.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Random, AllStructs } from "./types";

// Custom types for the contract
export namespace DIAOracleBaseTestTypes {
  export type Fields = {
    admin: Address;
    subContractDeposit: bigint;
  };

  export type State = ContractState<Fields>;

  export type AdminChangedEvent = ContractEvent<{ newAdmin: Address }>;

  export interface CallMethodTable {
    getAdmin: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getSubContractDeposit: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  DIAOracleBaseTestInstance,
  DIAOracleBaseTestTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as DIAOracleBaseTestTypes.Fields;
  }

  eventIndex = { AdminChanged: 0 };
  consts = { ErrorCodes: { AdminAllowedOnly: BigInt(0) } };

  at(address: string): DIAOracleBaseTestInstance {
    return new DIAOracleBaseTestInstance(address);
  }

  tests = {
    getAdmin: async (
      params: Omit<
        TestContractParamsWithoutMaps<DIAOracleBaseTestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getAdmin", params);
    },
    getSubContractDeposit: async (
      params: Omit<
        TestContractParamsWithoutMaps<DIAOracleBaseTestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getSubContractDeposit", params);
    },
    changeAdmin: async (
      params: TestContractParamsWithoutMaps<
        DIAOracleBaseTestTypes.Fields,
        { newAdmin: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "changeAdmin", params);
    },
    setSubContractDeposit: async (
      params: TestContractParamsWithoutMaps<
        DIAOracleBaseTestTypes.Fields,
        { value: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setSubContractDeposit", params);
    },
    checkAdmin: async (
      params: TestContractParamsWithoutMaps<
        DIAOracleBaseTestTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "checkAdmin", params);
    },
    protected: async (
      params: Omit<
        TestContractParamsWithoutMaps<DIAOracleBaseTestTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "protected", params);
    },
  };
}

// Use this object to test and deploy the contract
export const DIAOracleBaseTest = new Factory(
  Contract.fromJson(
    DIAOracleBaseTestContractJson,
    "",
    "a333cdfc59242db056160b8d79b8ded40c64a24ed3c6179be6fe36658a68580f",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class DIAOracleBaseTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DIAOracleBaseTestTypes.State> {
    return fetchContractState(DIAOracleBaseTest, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAdminChangedEvent(
    options: EventSubscribeOptions<DIAOracleBaseTestTypes.AdminChangedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DIAOracleBaseTest.contract,
      this,
      options,
      "AdminChanged",
      fromCount
    );
  }

  methods = {
    getAdmin: async (
      params?: DIAOracleBaseTestTypes.CallMethodParams<"getAdmin">
    ): Promise<DIAOracleBaseTestTypes.CallMethodResult<"getAdmin">> => {
      return callMethod(
        DIAOracleBaseTest,
        this,
        "getAdmin",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getSubContractDeposit: async (
      params?: DIAOracleBaseTestTypes.CallMethodParams<"getSubContractDeposit">
    ): Promise<
      DIAOracleBaseTestTypes.CallMethodResult<"getSubContractDeposit">
    > => {
      return callMethod(
        DIAOracleBaseTest,
        this,
        "getSubContractDeposit",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends DIAOracleBaseTestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DIAOracleBaseTestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      DIAOracleBaseTest,
      this,
      calls,
      getContractByCodeHash
    )) as DIAOracleBaseTestTypes.MultiCallResults<Calls>;
  }
}
