/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as DIARandomValueContractJson } from "../random/DIARandomValue.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Random, AllStructs } from "./types";

// Custom types for the contract
export namespace DIARandomValueTypes {
  export type Fields = {
    value: Random;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getValue: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Random>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  DIARandomValueInstance,
  DIARandomValueTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as DIARandomValueTypes.Fields;
  }

  at(address: string): DIARandomValueInstance {
    return new DIARandomValueInstance(address);
  }

  tests = {
    getValue: async (
      params: Omit<
        TestContractParamsWithoutMaps<DIARandomValueTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Random>> => {
      return testMethod(this, "getValue", params);
    },
  };
}

// Use this object to test and deploy the contract
export const DIARandomValue = new Factory(
  Contract.fromJson(
    DIARandomValueContractJson,
    "",
    "10ed3ba9f641e7909ae248a8f8d34c147e93cf47272259ada0856c34c0625ac5",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class DIARandomValueInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DIARandomValueTypes.State> {
    return fetchContractState(DIARandomValue, this);
  }

  methods = {
    getValue: async (
      params?: DIARandomValueTypes.CallMethodParams<"getValue">
    ): Promise<DIARandomValueTypes.CallMethodResult<"getValue">> => {
      return callMethod(
        DIARandomValue,
        this,
        "getValue",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends DIARandomValueTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DIARandomValueTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      DIARandomValue,
      this,
      calls,
      getContractByCodeHash
    )) as DIARandomValueTypes.MultiCallResults<Calls>;
  }
}
