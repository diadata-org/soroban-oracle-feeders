/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
} from "@alephium/web3";
import { default as DIAOracleValueTestContractJson } from "../test/DIAOracleValueTest.ral.json";
import { getContractByCodeHash } from "./contracts";
import { Random, AllStructs } from "./types";

// Custom types for the contract
export namespace DIAOracleValueTestTypes {
  export type State = Omit<ContractState<any>, "fields">;
}

class Factory extends ContractFactory<DIAOracleValueTestInstance, {}> {
  at(address: string): DIAOracleValueTestInstance {
    return new DIAOracleValueTestInstance(address);
  }

  tests = {
    update_value: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { instance: HexString; value: bigint; timestamp: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "update_value", params);
    },
  };
}

// Use this object to test and deploy the contract
export const DIAOracleValueTest = new Factory(
  Contract.fromJson(
    DIAOracleValueTestContractJson,
    "",
    "134666d61c55517b285ea1ef18ae92725219960ed9f4a884247804f5237f7a9e",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class DIAOracleValueTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DIAOracleValueTestTypes.State> {
    return fetchContractState(DIAOracleValueTest, this);
  }
}
