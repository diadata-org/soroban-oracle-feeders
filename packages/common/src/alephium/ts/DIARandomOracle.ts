/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as DIARandomOracleContractJson } from "../DIARandomOracle.ral.json";
import { getContractByCodeHash } from "./contracts";
import { DIAOracleValue, DIARandomValue, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace DIARandomOracleTypes {
  export type Fields = {
    admin: Address;
    lastRound: bigint;
  };

  export type State = ContractState<Fields>;

  export type AdminChangedEvent = ContractEvent<{ newAdmin: Address }>;
  export type OracleUpdateEvent = ContractEvent<{
    round: bigint;
    randomness: HexString;
    signature: HexString;
  }>;

  export interface CallMethodTable {
    getLastRound: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getRandomValue: {
      params: CallContractParams<{ round: bigint }>;
      result: CallContractResult<DIARandomValue>;
    };
    getAdmin: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    changeAdmin: {
      params: CallContractParams<{ newAdmin: Address }>;
      result: CallContractResult<null>;
    };
    setRandomValue: {
      params: CallContractParams<{
        modifiedRound: bigint;
        value: DIARandomValue;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];



  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;


 

  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getLastRound: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getRandomValue: {
      params: SignExecuteContractMethodParams<{ round: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getAdmin: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    changeAdmin: {
      params: SignExecuteContractMethodParams<{ newAdmin: Address }>;
      result: SignExecuteScriptTxResult;
    };
    setRandomValue: {
      params: SignExecuteContractMethodParams<{
        modifiedRound: bigint;
        value: DIARandomValue;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  DIARandomOracleInstance,
  DIARandomOracleTypes.Fields
> {
  encodeFields(fields: DIARandomOracleTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as DIARandomOracleTypes.Fields;
  }

  eventIndex = { AdminChanged: 0, OracleUpdate: 1 };
  consts = {
    ErrorCodes: { AdminAllowedOnly: BigInt("0"), InvalidRound: BigInt("1") },
  };

  at(address: string): DIARandomOracleInstance {
    return new DIARandomOracleInstance(address);
  }

  tests = {
    getLastRound: async (
      params: Omit<
        TestContractParams<
          DIARandomOracleTypes.Fields,
          never,
          { randomValues?: Map<bigint, DIARandomValue> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<bigint, { randomValues?: Map<bigint, DIARandomValue> }>
    > => {
      return testMethod(this, "getLastRound", params, getContractByCodeHash);
    },
    getRandomValue: async (
      params: TestContractParams<
        DIARandomOracleTypes.Fields,
        { round: bigint },
        { randomValues?: Map<bigint, DIARandomValue> }
      >
    ): Promise<
      TestContractResult<
        DIARandomValue,
        { randomValues?: Map<bigint, DIARandomValue> }
      >
    > => {
      return testMethod(this, "getRandomValue", params, getContractByCodeHash);
    },
    getAdmin: async (
      params: Omit<
        TestContractParams<
          DIARandomOracleTypes.Fields,
          never,
          { randomValues?: Map<bigint, DIARandomValue> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        Address,
        { randomValues?: Map<bigint, DIARandomValue> }
      >
    > => {
      return testMethod(this, "getAdmin", params, getContractByCodeHash);
    },
    changeAdmin: async (
      params: TestContractParams<
        DIARandomOracleTypes.Fields,
        { newAdmin: Address },
        { randomValues?: Map<bigint, DIARandomValue> }
      >
    ): Promise<
      TestContractResult<null, { randomValues?: Map<bigint, DIARandomValue> }>
    > => {
      return testMethod(this, "changeAdmin", params, getContractByCodeHash);
    },
    checkAdmin: async (
      params: TestContractParams<
        DIARandomOracleTypes.Fields,
        { caller: Address },
        { randomValues?: Map<bigint, DIARandomValue> }
      >
    ): Promise<
      TestContractResult<null, { randomValues?: Map<bigint, DIARandomValue> }>
    > => {
      return testMethod(this, "checkAdmin", params, getContractByCodeHash);
    },
    setRandomValue: async (
      params: TestContractParams<
        DIARandomOracleTypes.Fields,
        { modifiedRound: bigint; value: DIARandomValue },
        { randomValues?: Map<bigint, DIARandomValue> }
      >
    ): Promise<
      TestContractResult<null, { randomValues?: Map<bigint, DIARandomValue> }>
    > => {
      return testMethod(this, "setRandomValue", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const DIARandomOracle = new Factory(
  Contract.fromJson(
    DIARandomOracleContractJson,
    "=24-2+de=293-1+8=64+7a7e0214696e73657274206174206d617020706174683a2000=36",
    "e65e01475123e923e428000dfe28dbf79f0be9a8099139d1fb587ed21b75a237",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class DIARandomOracleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    randomValues: new RalphMap<bigint, DIARandomValue>(
      DIARandomOracle.contract,
      this.contractId,
      "randomValues"
    ),
  };

  async fetchState(): Promise<DIARandomOracleTypes.State> {
    return fetchContractState(DIARandomOracle, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAdminChangedEvent(
    options: EventSubscribeOptions<DIARandomOracleTypes.AdminChangedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DIARandomOracle.contract,
      this,
      options,
      "AdminChanged",
      fromCount
    );
  }

  subscribeOracleUpdateEvent(
    options: EventSubscribeOptions<DIARandomOracleTypes.OracleUpdateEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DIARandomOracle.contract,
      this,
      options,
      "OracleUpdate",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | DIARandomOracleTypes.AdminChangedEvent
      | DIARandomOracleTypes.OracleUpdateEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      DIARandomOracle.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getLastRound: async (
      params?: DIARandomOracleTypes.CallMethodParams<"getLastRound">
    ): Promise<DIARandomOracleTypes.CallMethodResult<"getLastRound">> => {
      return callMethod(
        DIARandomOracle,
        this,
        "getLastRound",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getRandomValue: async (
      params: DIARandomOracleTypes.CallMethodParams<"getRandomValue">
    ): Promise<DIARandomOracleTypes.CallMethodResult<"getRandomValue">> => {
      return callMethod(
        DIARandomOracle,
        this,
        "getRandomValue",
        params,
        getContractByCodeHash
      );
    },
    getAdmin: async (
      params?: DIARandomOracleTypes.CallMethodParams<"getAdmin">
    ): Promise<DIARandomOracleTypes.CallMethodResult<"getAdmin">> => {
      return callMethod(
        DIARandomOracle,
        this,
        "getAdmin",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    changeAdmin: async (
      params: DIARandomOracleTypes.CallMethodParams<"changeAdmin">
    ): Promise<DIARandomOracleTypes.CallMethodResult<"changeAdmin">> => {
      return callMethod(
        DIARandomOracle,
        this,
        "changeAdmin",
        params,
        getContractByCodeHash
      );
    },
    setRandomValue: async (
      params: DIARandomOracleTypes.CallMethodParams<"setRandomValue">
    ): Promise<DIARandomOracleTypes.CallMethodResult<"setRandomValue">> => {
      return callMethod(
        DIARandomOracle,
        this,
        "setRandomValue",
        params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    getLastRound: async (
      params: DIARandomOracleTypes.SignExecuteMethodParams<"getLastRound">
    ): Promise<
      DIARandomOracleTypes.SignExecuteMethodResult<"getLastRound">
    > => {
      return signExecuteMethod(DIARandomOracle, this, "getLastRound", params);
    },
    getRandomValue: async (
      params: DIARandomOracleTypes.SignExecuteMethodParams<"getRandomValue">
    ): Promise<
      DIARandomOracleTypes.SignExecuteMethodResult<"getRandomValue">
    > => {
      return signExecuteMethod(DIARandomOracle, this, "getRandomValue", params);
    },
    getAdmin: async (
      params: DIARandomOracleTypes.SignExecuteMethodParams<"getAdmin">
    ): Promise<DIARandomOracleTypes.SignExecuteMethodResult<"getAdmin">> => {
      return signExecuteMethod(DIARandomOracle, this, "getAdmin", params);
    },
    changeAdmin: async (
      params: DIARandomOracleTypes.SignExecuteMethodParams<"changeAdmin">
    ): Promise<DIARandomOracleTypes.SignExecuteMethodResult<"changeAdmin">> => {
      return signExecuteMethod(DIARandomOracle, this, "changeAdmin", params);
    },
    setRandomValue: async (
      params: DIARandomOracleTypes.SignExecuteMethodParams<"setRandomValue">
    ): Promise<
      DIARandomOracleTypes.SignExecuteMethodResult<"setRandomValue">
    > => {
      return signExecuteMethod(DIARandomOracle, this, "setRandomValue", params);
    },
  };

  async multicall<Calls extends DIARandomOracleTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DIARandomOracleTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      DIARandomOracle,
      this,
      calls,
      getContractByCodeHash
    )) as DIARandomOracleTypes.MultiCallResults<Calls>;
  }
}
