/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as DIAOracleContractJson } from "../DIAOracle.ral.json";
import { getContractByCodeHash } from "./contracts";
import { DIAOracleValue, DIARandomValue, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace DIAOracleTypes {
  export type Fields = {
    admin: Address;
  };

  export type State = ContractState<Fields>;

  export type AdminChangedEvent = ContractEvent<{ newAdmin: Address }>;
  export type OracleUpdateEvent = ContractEvent<{
    key: HexString;
    value: bigint;
    timestamp: bigint;
  }>;

  export interface CallMethodTable {
    getValue: {
      params: CallContractParams<{ key: HexString }>;
      result: CallContractResult<DIAOracleValue>;
    };
    getAdmin: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    changeAdmin: {
      params: CallContractParams<{ newAdmin: Address }>;
      result: CallContractResult<null>;
    };
    setValue: {
      params: CallContractParams<{
        key: HexString;
        value: bigint;
        timestamp: bigint;
      }>;
      result: CallContractResult<null>;
    };
    setMultipleValues: {
      params: CallContractParams<{
        keys: [
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString
        ];
        values: [
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint
        ];
        timestamps: [
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint
        ];
        batchSize: bigint;
      }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getValue: {
      params: SignExecuteContractMethodParams<{ key: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    getAdmin: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    changeAdmin: {
      params: SignExecuteContractMethodParams<{ newAdmin: Address }>;
      result: SignExecuteScriptTxResult;
    };
    setValue: {
      params: SignExecuteContractMethodParams<{
        key: HexString;
        value: bigint;
        timestamp: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    setMultipleValues: {
      params: SignExecuteContractMethodParams<{
        keys: [
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString,
          HexString
        ];
        values: [
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint
        ];
        timestamps: [
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint
        ];
        batchSize: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  DIAOracleInstance,
  DIAOracleTypes.Fields
> {
  encodeFields(fields: DIAOracleTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as DIAOracleTypes.Fields;
  }

  eventIndex = { AdminChanged: 0, OracleUpdate: 1 };
  consts = {
    MaxBatchSize: BigInt("10"),
    ErrorCodes: {
      AdminAllowedOnly: BigInt("0"),
      InvalidBatchSize: BigInt("1"),
      InvalidKey: BigInt("2"),
    },
  };

  at(address: string): DIAOracleInstance {
    return new DIAOracleInstance(address);
  }

  tests = {
    getValue: async (
      params: TestContractParams<
        DIAOracleTypes.Fields,
        { key: HexString },
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    ): Promise<
      TestContractResult<
        DIAOracleValue,
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    > => {
      return testMethod(this, "getValue", params, getContractByCodeHash);
    },
    getAdmin: async (
      params: Omit<
        TestContractParams<
          DIAOracleTypes.Fields,
          never,
          { onchainValues?: Map<HexString, DIAOracleValue> }
        >,
        "testArgs"
      >
    ): Promise<
      TestContractResult<
        Address,
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    > => {
      return testMethod(this, "getAdmin", params, getContractByCodeHash);
    },
    changeAdmin: async (
      params: TestContractParams<
        DIAOracleTypes.Fields,
        { newAdmin: Address },
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    ): Promise<
      TestContractResult<
        null,
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    > => {
      return testMethod(this, "changeAdmin", params, getContractByCodeHash);
    },
    checkAdmin: async (
      params: TestContractParams<
        DIAOracleTypes.Fields,
        { caller: Address },
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    ): Promise<
      TestContractResult<
        null,
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    > => {
      return testMethod(this, "checkAdmin", params, getContractByCodeHash);
    },
    setValue: async (
      params: TestContractParams<
        DIAOracleTypes.Fields,
        { key: HexString; value: bigint; timestamp: bigint },
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    ): Promise<
      TestContractResult<
        null,
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    > => {
      return testMethod(this, "setValue", params, getContractByCodeHash);
    },
    setMultipleValues: async (
      params: TestContractParams<
        DIAOracleTypes.Fields,
        {
          keys: [
            HexString,
            HexString,
            HexString,
            HexString,
            HexString,
            HexString,
            HexString,
            HexString,
            HexString,
            HexString
          ];
          values: [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
          ];
          timestamps: [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
          ];
          batchSize: bigint;
        },
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    ): Promise<
      TestContractResult<
        null,
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    > => {
      return testMethod(
        this,
        "setMultipleValues",
        params,
        getContractByCodeHash
      );
    },
    updateValue: async (
      params: TestContractParams<
        DIAOracleTypes.Fields,
        { key: HexString; value: bigint; timestamp: bigint },
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    ): Promise<
      TestContractResult<
        null,
        { onchainValues?: Map<HexString, DIAOracleValue> }
      >
    > => {
      return testMethod(this, "updateValue", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const DIAOracle = new Factory(
  Contract.fromJson(
    DIAOracleContractJson,
    "=30-2+59=455-1+9=37-1+d=38+7a7e0214696e73657274206174206d617020706174683a2000=108",
    "4cd1d01561d5fdfb1c83f51f7ecdae84f2155e2a5cfdbb9ae488330f58ff5077",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class DIAOracleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    onchainValues: new RalphMap<HexString, DIAOracleValue>(
      DIAOracle.contract,
      this.contractId,
      "onchainValues"
    ),
  };

  async fetchState(): Promise<DIAOracleTypes.State> {
    return fetchContractState(DIAOracle, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAdminChangedEvent(
    options: EventSubscribeOptions<DIAOracleTypes.AdminChangedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DIAOracle.contract,
      this,
      options,
      "AdminChanged",
      fromCount
    );
  }

  subscribeOracleUpdateEvent(
    options: EventSubscribeOptions<DIAOracleTypes.OracleUpdateEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DIAOracle.contract,
      this,
      options,
      "OracleUpdate",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      DIAOracleTypes.AdminChangedEvent | DIAOracleTypes.OracleUpdateEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      DIAOracle.contract,
      this,
      options,
      fromCount
    );
  }

  methods = {
    getValue: async (
      params: DIAOracleTypes.CallMethodParams<"getValue">
    ): Promise<DIAOracleTypes.CallMethodResult<"getValue">> => {
      return callMethod(
        DIAOracle,
        this,
        "getValue",
        params,
        getContractByCodeHash
      );
    },
    getAdmin: async (
      params?: DIAOracleTypes.CallMethodParams<"getAdmin">
    ): Promise<DIAOracleTypes.CallMethodResult<"getAdmin">> => {
      return callMethod(
        DIAOracle,
        this,
        "getAdmin",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    changeAdmin: async (
      params: DIAOracleTypes.CallMethodParams<"changeAdmin">
    ): Promise<DIAOracleTypes.CallMethodResult<"changeAdmin">> => {
      return callMethod(
        DIAOracle,
        this,
        "changeAdmin",
        params,
        getContractByCodeHash
      );
    },
    setValue: async (
      params: DIAOracleTypes.CallMethodParams<"setValue">
    ): Promise<DIAOracleTypes.CallMethodResult<"setValue">> => {
      return callMethod(
        DIAOracle,
        this,
        "setValue",
        params,
        getContractByCodeHash
      );
    },
    setMultipleValues: async (
      params: DIAOracleTypes.CallMethodParams<"setMultipleValues">
    ): Promise<DIAOracleTypes.CallMethodResult<"setMultipleValues">> => {
      return callMethod(
        DIAOracle,
        this,
        "setMultipleValues",
        params,
        getContractByCodeHash
      );
    },
  };

  view = this.methods;

  transact = {
    getValue: async (
      params: DIAOracleTypes.SignExecuteMethodParams<"getValue">
    ): Promise<DIAOracleTypes.SignExecuteMethodResult<"getValue">> => {
      return signExecuteMethod(DIAOracle, this, "getValue", params);
    },
    getAdmin: async (
      params: DIAOracleTypes.SignExecuteMethodParams<"getAdmin">
    ): Promise<DIAOracleTypes.SignExecuteMethodResult<"getAdmin">> => {
      return signExecuteMethod(DIAOracle, this, "getAdmin", params);
    },
    changeAdmin: async (
      params: DIAOracleTypes.SignExecuteMethodParams<"changeAdmin">
    ): Promise<DIAOracleTypes.SignExecuteMethodResult<"changeAdmin">> => {
      return signExecuteMethod(DIAOracle, this, "changeAdmin", params);
    },
    setValue: async (
      params: DIAOracleTypes.SignExecuteMethodParams<"setValue">
    ): Promise<DIAOracleTypes.SignExecuteMethodResult<"setValue">> => {
      return signExecuteMethod(DIAOracle, this, "setValue", params);
    },
    setMultipleValues: async (
      params: DIAOracleTypes.SignExecuteMethodParams<"setMultipleValues">
    ): Promise<DIAOracleTypes.SignExecuteMethodResult<"setMultipleValues">> => {
      return signExecuteMethod(DIAOracle, this, "setMultipleValues", params);
    },
  };

  async multicall<Calls extends DIAOracleTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DIAOracleTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      DIAOracle,
      this,
      calls,
      getContractByCodeHash
    )) as DIAOracleTypes.MultiCallResults<Calls>;
  }
}
