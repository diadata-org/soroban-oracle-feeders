/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from '@alephium/web3';
import { default as DIAOracleBaseTestContractJson } from '../test/DIAOracleBaseTest.ral.json';
import { getContractByCodeHash } from './contracts';
import { DIAOracleValue, DIARandomValue, AllStructs } from './types';

// Custom types for the contract
export namespace DIAOracleBaseTestTypes {
  export type Fields = {
    admin: Address;
  };

  export type State = ContractState<Fields>;

  export type AdminChangedEvent = ContractEvent<{ newAdmin: Address }>;

  export interface CallMethodTable {
    getAdmin: {
      params: Omit<CallContractParams<{}>, 'args'>;
      result: CallContractResult<Address>;
    };
    changeAdmin: {
      params: CallContractParams<{ newAdmin: Address }>;
      result: CallContractResult<null>;
    };
    protected: {
      params: Omit<CallContractParams<{}>, 'args'>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> = CallMethodTable[T]['params'];
  export type CallMethodResult<T extends keyof CallMethodTable> = CallMethodTable[T]['result'];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]['params'];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]['result']
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getAdmin: {
      params: Omit<SignExecuteContractMethodParams<{}>, 'args'>;
      result: SignExecuteScriptTxResult;
    };
    changeAdmin: {
      params: SignExecuteContractMethodParams<{ newAdmin: Address }>;
      result: SignExecuteScriptTxResult;
    };
    protected: {
      params: Omit<SignExecuteContractMethodParams<{}>, 'args'>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]['params'];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]['result'];
}

class Factory extends ContractFactory<DIAOracleBaseTestInstance, DIAOracleBaseTestTypes.Fields> {
  encodeFields(fields: DIAOracleBaseTestTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs,
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as DIAOracleBaseTestTypes.Fields;
  }

  eventIndex = { AdminChanged: 0 };
  consts = { ErrorCodes: { AdminAllowedOnly: BigInt('0') } };

  at(address: string): DIAOracleBaseTestInstance {
    return new DIAOracleBaseTestInstance(address);
  }

  tests = {
    getAdmin: async (
      params: Omit<
        TestContractParamsWithoutMaps<DIAOracleBaseTestTypes.Fields, never>,
        'testArgs'
      >,
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, 'getAdmin', params, getContractByCodeHash);
    },
    changeAdmin: async (
      params: TestContractParamsWithoutMaps<DIAOracleBaseTestTypes.Fields, { newAdmin: Address }>,
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, 'changeAdmin', params, getContractByCodeHash);
    },
    checkAdmin: async (
      params: TestContractParamsWithoutMaps<DIAOracleBaseTestTypes.Fields, { caller: Address }>,
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, 'checkAdmin', params, getContractByCodeHash);
    },
    protected: async (
      params: Omit<
        TestContractParamsWithoutMaps<DIAOracleBaseTestTypes.Fields, never>,
        'testArgs'
      >,
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, 'protected', params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const DIAOracleBaseTest = new Factory(
  Contract.fromJson(
    DIAOracleBaseTestContractJson,
    '',
    '98a92bccb738d1e440cb4d4b17967784b69ce728edcc841110094f713593a252',
    AllStructs,
  ),
);

// Use this class to interact with the blockchain
export class DIAOracleBaseTestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DIAOracleBaseTestTypes.State> {
    return fetchContractState(DIAOracleBaseTest, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeAdminChangedEvent(
    options: EventSubscribeOptions<DIAOracleBaseTestTypes.AdminChangedEvent>,
    fromCount?: number,
  ): EventSubscription {
    return subscribeContractEvent(
      DIAOracleBaseTest.contract,
      this,
      options,
      'AdminChanged',
      fromCount,
    );
  }

  methods = {
    getAdmin: async (
      params?: DIAOracleBaseTestTypes.CallMethodParams<'getAdmin'>,
    ): Promise<DIAOracleBaseTestTypes.CallMethodResult<'getAdmin'>> => {
      return callMethod(
        DIAOracleBaseTest,
        this,
        'getAdmin',
        params === undefined ? {} : params,
        getContractByCodeHash,
      );
    },
    changeAdmin: async (
      params: DIAOracleBaseTestTypes.CallMethodParams<'changeAdmin'>,
    ): Promise<DIAOracleBaseTestTypes.CallMethodResult<'changeAdmin'>> => {
      return callMethod(DIAOracleBaseTest, this, 'changeAdmin', params, getContractByCodeHash);
    },
    protected: async (
      params?: DIAOracleBaseTestTypes.CallMethodParams<'protected'>,
    ): Promise<DIAOracleBaseTestTypes.CallMethodResult<'protected'>> => {
      return callMethod(
        DIAOracleBaseTest,
        this,
        'protected',
        params === undefined ? {} : params,
        getContractByCodeHash,
      );
    },
  };

  view = this.methods;

  transact = {
    getAdmin: async (
      params: DIAOracleBaseTestTypes.SignExecuteMethodParams<'getAdmin'>,
    ): Promise<DIAOracleBaseTestTypes.SignExecuteMethodResult<'getAdmin'>> => {
      return signExecuteMethod(DIAOracleBaseTest, this, 'getAdmin', params);
    },
    changeAdmin: async (
      params: DIAOracleBaseTestTypes.SignExecuteMethodParams<'changeAdmin'>,
    ): Promise<DIAOracleBaseTestTypes.SignExecuteMethodResult<'changeAdmin'>> => {
      return signExecuteMethod(DIAOracleBaseTest, this, 'changeAdmin', params);
    },
    protected: async (
      params: DIAOracleBaseTestTypes.SignExecuteMethodParams<'protected'>,
    ): Promise<DIAOracleBaseTestTypes.SignExecuteMethodResult<'protected'>> => {
      return signExecuteMethod(DIAOracleBaseTest, this, 'protected', params);
    },
  };

  async multicall<Calls extends DIAOracleBaseTestTypes.MultiCallParams>(
    calls: Calls,
  ): Promise<DIAOracleBaseTestTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      DIAOracleBaseTest,
      this,
      calls,
      getContractByCodeHash,
    )) as DIAOracleBaseTestTypes.MultiCallResults<Calls>;
  }
}
